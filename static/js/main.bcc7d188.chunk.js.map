{"version":3,"sources":["App.jsx","index.js"],"names":["App","useState","todos","setTodos","todo","setTodo","todoEdit","setTodoEdit","textEdit","setTextEdit","useEffect","temp","localStorage","getItem","loadedTodos","JSON","parse","dataToJson","stringify","setItem","className","onSubmit","e","preventDefault","newTodo","id","Date","getTime","text","completed","concat","type","onChange","target","value","map","onClick","updatedTodos","filter","deleteTodo","toggleComplete","checked","editTodo","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNA+GeA,MA3Gf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAgCJ,mBAAS,MAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAAgCN,mBAAS,IAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KAyDA,OAvDAC,qBAAU,WACR,IAAMC,EAAOC,aAAaC,QAAQ,SAC5BC,EAAcC,KAAKC,MAAML,GAE3BG,GACFX,EAASW,KAEV,IAEHJ,qBAAU,WACR,IAAMO,EAAaF,KAAKG,UAAUhB,GAClCU,aAAaO,QAAQ,QAASF,KAC7B,CAACf,IA4CF,sBAAKkB,UAAU,MAAf,UACE,uBAAMC,SA3CV,SAAsBC,GACpBA,EAAEC,iBAEF,IAAMC,EAAU,CACdC,IAAI,IAAIC,MAAOC,UACfC,KAAMxB,EACNyB,WAAW,GAGb1B,EAAS,YAAID,GAAO4B,OAAON,IAC3BnB,EAAQ,KAiCN,UACE,uBACE0B,KAAK,OACLC,SAAU,SAACV,GAAD,OAAOjB,EAAQiB,EAAEW,OAAOC,QAClCA,MAAO9B,IAET,wBAAQ2B,KAAK,SAAb,yBAED7B,EAAMiC,KAAI,SAAC/B,GAAD,OACT,sBAAmBgB,UAAU,iBAA7B,UACGd,IAAaF,EAAKqB,GACjB,uBACEM,KAAK,OACLC,SAAU,SAACV,GAAD,OAAOb,EAAYa,EAAEW,OAAOC,QACtCA,MAAO1B,IAGT,qBAAKY,UAAU,YAAf,SAA4BhB,EAAKwB,OAGnC,wBAAQQ,QAAS,kBAlDzB,SAAoBX,GAClB,IAAMY,EAAe,YAAInC,GAAOoC,QAAO,SAAClC,GAAD,OAAUA,EAAKqB,KAAOA,KAE7DtB,EAASkC,GA+CoBE,CAAWnC,EAAKqB,KAAvC,oBACA,uBACEM,KAAK,WACLC,SAAU,kBA/CpB,SAAwBP,GACtB,IAAMY,EAAe,YAAInC,GAAOiC,KAAI,SAAC/B,GAInC,OAHIA,EAAKqB,KAAOA,IACdrB,EAAKyB,WAAazB,EAAKyB,WAElBzB,KAETD,EAASkC,GAwCeG,CAAepC,EAAKqB,KACpCgB,QAASrC,EAAKyB,YAEfvB,IAAaF,EAAKqB,GACjB,wBACEL,UAAU,kBACVgB,QAAS,kBA3CrB,SAAkBX,GAChB,IAAMY,EAAe,YAAInC,GAAOiC,KAAI,SAAC/B,GAInC,OAHIA,EAAKqB,KAAOA,IACdrB,EAAKwB,KAAOpB,GAEPJ,KAETD,EAASkC,GACT9B,EAAY,MACZE,EAAY,IAkCaiC,CAAStC,EAAKqB,KAF/B,yBAOA,wBAAQL,UAAU,WAAWgB,QAAS,kBAAM7B,EAAYH,EAAKqB,KAA7D,yBAzBMrB,EAAKqB,WCvEvBkB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.bcc7d188.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport \"./app.scss\";\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [todo, setTodo] = useState(\"\");\n  const [todoEdit, setTodoEdit] = useState(null);\n  const [textEdit, setTextEdit] = useState(\"\");\n\n  useEffect(() => {\n    const temp = localStorage.getItem(\"todos\");\n    const loadedTodos = JSON.parse(temp);\n\n    if (loadedTodos) {\n      setTodos(loadedTodos);\n    }\n  }, []);\n\n  useEffect(() => {\n    const dataToJson = JSON.stringify(todos);\n    localStorage.setItem(\"todos\", dataToJson);\n  }, [todos]);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    const newTodo = {\n      id: new Date().getTime(),\n      text: todo,\n      completed: false,\n    };\n\n    setTodos([...todos].concat(newTodo));\n    setTodo(\"\");\n  }\n\n  function deleteTodo(id) {\n    const updatedTodos = [...todos].filter((todo) => todo.id !== id);\n\n    setTodos(updatedTodos);\n  }\n\n  function toggleComplete(id) {\n    const updatedTodos = [...todos].map((todo) => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  }\n\n  function editTodo(id) {\n    const updatedTodos = [...todos].map((todo) => {\n      if (todo.id === id) {\n        todo.text = textEdit;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n    setTodoEdit(null);\n    setTextEdit(\"\");\n  }\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          onChange={(e) => setTodo(e.target.value)}\n          value={todo}\n        />\n        <button type=\"submit\">Add Todo</button>\n      </form>\n      {todos.map((todo) => (\n        <div key={todo.id} className=\"todo-container\">\n          {todoEdit === todo.id ? (\n            <input\n              type=\"text\"\n              onChange={(e) => setTextEdit(e.target.value)}\n              value={textEdit}\n            ></input>\n          ) : (\n            <div className=\"todo-text\">{todo.text}</div>\n          )}\n\n          <button onClick={() => deleteTodo(todo.id)}>Delete</button>\n          <input\n            type=\"checkbox\"\n            onChange={() => toggleComplete(todo.id)}\n            checked={todo.completed}\n          />\n          {todoEdit === todo.id ? (\n            <button\n              className=\"submit-edit-btn\"\n              onClick={() => editTodo(todo.id)}\n            >\n              Submit Edit\n            </button>\n          ) : (\n            <button className=\"edit-btn\" onClick={() => setTodoEdit(todo.id)}>\n              Edit Todo\n            </button>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}